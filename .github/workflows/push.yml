name: Dictionary Data Upload

# on:
#  push:
#    branches:
#      - main

permissions:
  id-token: write
  contents: read

jobs:
  upload:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_ROLE_REGION }}
        role-session-name: dictionary-parser-upload

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set short git commit SHA
      id: git
      shell: bash
      run: echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> "$GITHUB_OUTPUT"

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci --prefer-offline
        echo "Verifying installation..."
        npm list --depth=0

    - name: Generate dictionary data
      run: |
        echo "Node.js version: $(node -v)"
        echo "NPM version: $(npm -v)"
        echo "Starting dictionary parsing..."
        npm run parse
        echo "Dictionary parsing completed successfully"
  
    - name: Verify and compress data
      run: |
        echo "Verifying output files exist..."
        if [ ! -f "output/wordData.json" ]; then
          echo "Error: wordData.json not found"
          exit 1
        fi
        echo "Compressing wordData.json..."
        jq -c . output/wordData.json | gzip -9 > output/wordData.json.gz
        echo "Compression completed. File sizes:"
        ls -lh output/wordData.json*

    - name: Version
      id: version
      shell: bash
      env:
        SHORT_SHA: ${{ steps.git.outputs.short_sha }}
      run: |
        echo "value=v$(date +%Y%m%d)-${SHORT_SHA}" >> "$GITHUB_OUTPUT"

    - name: Upload to S3
      shell: bash
      env:
        S3_URL: s3://${{ vars.S3_BUCKET }}/${{ steps.version.outputs.value }}/wordData.json.gz
      run: |
        echo "Uploading to S3: $S3_URL"
        if aws s3 cp output/wordData.json.gz "$S3_URL" --no-progress; then
          echo "‚úÖ Upload successful"
          echo -e "### üì¶ S3 Upload Successful\n\n**Location:** \`${S3_URL}\`\n**Version:** \`${{ steps.version.outputs.value }}\`" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "‚ùå Upload failed"
          exit 1
        fi
        
        # Verify upload
        echo "Verifying upload..."
        aws s3 ls "$S3_URL" --human-readable
